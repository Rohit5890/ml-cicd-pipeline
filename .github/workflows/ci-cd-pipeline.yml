name: ML CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8 black

      - name: Run linting
        run: |
          flake8 .
          black --check .

  test:
    runs-on: ubuntu-latest
    # needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v2
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
  
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-setuptools python3-wheel
  
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
  
      - name: Check installed versions
        run: |
          python -c "import numpy; print('numpy version:', numpy.__version__)"
          python -c "import sklearn; print('scikit-learn version:', sklearn.__version__)"
  
      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings -v


  # place holder for deployment taks [optional] 
  # build_and_deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #   # Checkout code
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   # Set up Python environment
  #   - name: Set up Python 3.x
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.10'

  #   # Install dependencies
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt

  #   # Train and log the model using MLflow
  #   - name: Train and log model with MLflow
  #     run: |
  #       python model/model.py  # This trains and logs the model with MLflow

  #   # Upload model to MLflow (if it's on a custom server)
  #   - name: Log model to MLflow server
  #     run: |
  #       # Ensure MLflow is pointed to the correct server
  #       export MLFLOW_TRACKING_URI=http://mlflow-server-url  # Set MLflow server URL if remote
  #       mlflow server --host 0.0.0.0 --port 5000 &  # Optional, if starting an MLflow server in this step
  #     env:
  #       MLFlow_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}  # Use your MLflow server URL from secrets

  #   # SSH into EC2 instance and deploy model
  #   - name: Deploy model to EC2
  #     run: |
  #       ssh -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} ec2-user@your-ec2-public-ip << 'EOF'
  #         cd /home/ec2-user/ml-app
  #         export MLFLOW_TRACKING_URI=http://mlflow-server-url
  #         # Install MLflow on EC2 (if not already installed)
  #         pip install mlflow
  #         # Download the model from MLflow registry
  #         python app/app.py
  #         # Restart Flask app if it's already running
  #         systemctl restart flask-app.service
  #       EOF
  #     env:
  #       MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }} 
